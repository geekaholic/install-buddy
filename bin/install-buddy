#!/usr/bin/env ruby
require 'optparse'
require 'yaml'
require_relative '../lib/install_buddy'
require_relative '../lib/sysinfo'
require_relative '../lib/distro_support'
require_relative '../lib/mixin/utils'
require_relative '../lib/remote' if InstallBuddy.get_option(:remote)

puts Utils::colorize("Found --debug so will print debug info", :red) if InstallBuddy.get_option(:debug)
puts Utils::colorize("Found --dry-run so will pretend to install packages", :yellow) if InstallBuddy.get_option(:dryrun)

# Check for valid packagelist file
packagelist_file = InstallBuddy.get_option(:packagelist)
abort(Utils::colorize("#{InstallBuddy.get_usage}. Type `install-buddy -h` for more details", :yellow)) if packagelist_file.nil?

# Check if running as root
abort(Utils::colorize('By default, install-buddy should be run as root (or with sudo). To run as non root pass in the --no-root option', :red)) unless InstallBuddy.get_option(:remote) || `id -u`.chomp == '0' || InstallBuddy.get_option(:noroot)

abort(Utils::colorize("File not found or is unreadable!", :red)) if !File.readable?(packagelist_file)

packagelist_yaml = YAML::load_file(packagelist_file)
abort(Utils::colorize("Package-list file #{packagelist_file} must be YAML with 'packages' as root", :red)) unless InstallBuddy.valid_packagelist?(packagelist_yaml)

# Detect distro/distro family and pick appropriate installer
si = Sysinfo.new
abort(Utils::colorize("Unsupported Linux distro family / distro #{si.distro_family}, #{si.distro}", :red)) unless DistroSupport.supported?(si.distro_family, si.distro)

installer = DistroSupport.installer(si.distro_family, si.distro)
abort("Installer #{installer} dependencies not met") unless installer.dependency_met?

#Let the installations begin!
packagelist_yaml["packages"].each do |pkg|
  pkg_name = InstallBuddy.resolve_package(pkg, si.distro_family, si.distro)

  # Check if this pkg should use shell cmds to execute
  args = InstallBuddy.resolve_shell(pkg)
  installer = DistroSupport.shell_installer if args

  # Check if we should skip install for this distro type
  if(InstallBuddy.skip_install?(pkg, si.distro_family, si.distro, si.os_type))
    puts Utils::colorize("Skipping #{pkg_name} on #{si.distro} ...", :yellow)
    next
  end

  installer.install(pkg_name, InstallBuddy.get_option(:dryrun), args)
end

# Install queued packages when it's done over remote
installer.remote_install if InstallBuddy.get_option(:remote) && !InstallBuddy.get_option(:dryrun)
